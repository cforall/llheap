#!/bin/sh -

exec=a.out
hostname=`hostname`
echo -n "======================\n${hostname}\n======================\n"

allocsdir="${HOME}/software/allocators"
allocators="libhoard.so libjemalloc.so libllheap.so libmimalloc.so libtbbmalloc.so libtcmalloc.so" # librpmalloc.so

cflag="-g -O3 -Wall -Wextra -Wall -Wextra -Werror -D${hostname}" #
if [ "${hostname}" = "algol" -o "${hostname}" = "prolog" ] ; then # ARM
#    atomicinst=-mno-outline-atomics	# use ARM LL/SC instructions for atomics
    atomicinst=-march=armv8.2-a+lse
    cflag=${cflag}" ${atomicinst}"
fi

# select newest compiler available for OS
osversion=`lsb_release -sr`
if [ "${osversion}" = "24.04" ] ; then
    CC=g++-14
elif [ "${osversion}" = "22.04" ] ; then
    CC=g++-12
elif [ "${osversion}" = "20.04" ] ; then
    CC=g++-11
else
    echo "unknown operating system"
    exit -1
fi

rm -rf core

# force initial thread to start on socket boundary
if [ "${hostname}" = "swift" ] ; then
    taskset="taskset --cpu-list 128"
elif [ "${hostname}" = "java" ] ; then
    taskset="taskset --cpu-list 32"
elif [ "${hostname}" = "prolog" ] ; then
    taskset="taskset --cpu-list 64"
elif [ "${hostname}" = "algol" ] ; then
    taskset="taskset --cpu-list 48"
else
    echo "unknown machine name"
    exit -1
fi

# strace="strace -cfq"
#time='/usr/bin/time -f "%Uu %Ss %Er %Mkb"'
program="testgen" # ownership

echo -n "\n**********************\nglibc\n**********************\n\n"
echo -n "${CC} ${cflag} ${program}.cc -lpthread\n\n"
${CC} ${cflag} ${program}.cc -lpthread
echo -n "ldd\n" ; ldd ./${exec} ; echo -n "\n"
# kill pid for a.out to terminate
eval ${time} ${strace} ${taskset} ./${exec}

for allocator in ${allocators} ; do
    echo -n "\n**********************\n${allocator}\n**********************\n\n"

    # compile without preload for checking => dynamic linking
    # echo -n "${CC} ${cflag} ${program}.cc ${allocsdir}/${allocator} -lpthread -U malloc -Wl,-rpath=${allocsdir}\n\n"
    # ${CC} ${cflag} ${program}.cc ${allocsdir}/${allocator} -lpthread -U malloc -Wl,-rpath=${allocsdir}
    # echo -n "ldd\n" ; ldd ./${exec} ; echo -n "\n"

    # compile with preload => dynamic linking
    echo -n "${CC} ${cflag} ${program}.cc ${allocsdir}/${allocator} -lpthread\n\n"
    ${CC} ${cflag} ${program}.cc -lpthread ${allocsdir}/${allocator}
    export LD_PRELOAD=${allocsdir}/${allocator}

    # kill pid for a.out to terminate
    eval ${time} ${strace} ${taskset} ./${exec}
done

rm -f "${exec}"
